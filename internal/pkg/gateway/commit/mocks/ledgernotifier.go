// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/core/ledger"
	"github.com/hyperledger/fabric/internal/pkg/gateway/commit"
)

type LedgerNotifier struct {
	CommitNotificationsChannelStub        func(<-chan struct{}) (<-chan *ledger.CommitNotification, error)
	commitNotificationsChannelMutex       sync.RWMutex
	commitNotificationsChannelArgsForCall []struct {
		arg1 <-chan struct{}
	}
	commitNotificationsChannelReturns struct {
		result1 <-chan *ledger.CommitNotification
		result2 error
	}
	commitNotificationsChannelReturnsOnCall map[int]struct {
		result1 <-chan *ledger.CommitNotification
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LedgerNotifier) CommitNotificationsChannel(arg1 <-chan struct{}) (<-chan *ledger.CommitNotification, error) {
	fake.commitNotificationsChannelMutex.Lock()
	ret, specificReturn := fake.commitNotificationsChannelReturnsOnCall[len(fake.commitNotificationsChannelArgsForCall)]
	fake.commitNotificationsChannelArgsForCall = append(fake.commitNotificationsChannelArgsForCall, struct {
		arg1 <-chan struct{}
	}{arg1})
	stub := fake.CommitNotificationsChannelStub
	fakeReturns := fake.commitNotificationsChannelReturns
	fake.recordInvocation("CommitNotificationsChannel", []interface{}{arg1})
	fake.commitNotificationsChannelMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *LedgerNotifier) CommitNotificationsChannelCallCount() int {
	fake.commitNotificationsChannelMutex.RLock()
	defer fake.commitNotificationsChannelMutex.RUnlock()
	return len(fake.commitNotificationsChannelArgsForCall)
}

func (fake *LedgerNotifier) CommitNotificationsChannelCalls(stub func(<-chan struct{}) (<-chan *ledger.CommitNotification, error)) {
	fake.commitNotificationsChannelMutex.Lock()
	defer fake.commitNotificationsChannelMutex.Unlock()
	fake.CommitNotificationsChannelStub = stub
}

func (fake *LedgerNotifier) CommitNotificationsChannelArgsForCall(i int) <-chan struct{} {
	fake.commitNotificationsChannelMutex.RLock()
	defer fake.commitNotificationsChannelMutex.RUnlock()
	argsForCall := fake.commitNotificationsChannelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *LedgerNotifier) CommitNotificationsChannelReturns(result1 <-chan *ledger.CommitNotification, result2 error) {
	fake.commitNotificationsChannelMutex.Lock()
	defer fake.commitNotificationsChannelMutex.Unlock()
	fake.CommitNotificationsChannelStub = nil
	fake.commitNotificationsChannelReturns = struct {
		result1 <-chan *ledger.CommitNotification
		result2 error
	}{result1, result2}
}

func (fake *LedgerNotifier) CommitNotificationsChannelReturnsOnCall(i int, result1 <-chan *ledger.CommitNotification, result2 error) {
	fake.commitNotificationsChannelMutex.Lock()
	defer fake.commitNotificationsChannelMutex.Unlock()
	fake.CommitNotificationsChannelStub = nil
	if fake.commitNotificationsChannelReturnsOnCall == nil {
		fake.commitNotificationsChannelReturnsOnCall = make(map[int]struct {
			result1 <-chan *ledger.CommitNotification
			result2 error
		})
	}
	fake.commitNotificationsChannelReturnsOnCall[i] = struct {
		result1 <-chan *ledger.CommitNotification
		result2 error
	}{result1, result2}
}

func (fake *LedgerNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commitNotificationsChannelMutex.RLock()
	defer fake.commitNotificationsChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LedgerNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commit.LedgerNotifier = new(LedgerNotifier)
