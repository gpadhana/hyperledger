// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reconciler.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReconcileRequest represents a request to reconcile a block.
type ReconcileRequest struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReconcileRequest) Reset()         { *m = ReconcileRequest{} }
func (m *ReconcileRequest) String() string { return proto.CompactTextString(m) }
func (*ReconcileRequest) ProtoMessage()    {}
func (*ReconcileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb40bcc605516477, []int{0}
}

func (m *ReconcileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReconcileRequest.Unmarshal(m, b)
}
func (m *ReconcileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReconcileRequest.Marshal(b, m, deterministic)
}
func (m *ReconcileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconcileRequest.Merge(m, src)
}
func (m *ReconcileRequest) XXX_Size() int {
	return xxx_messageInfo_ReconcileRequest.Size(m)
}
func (m *ReconcileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconcileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReconcileRequest proto.InternalMessageInfo

func (m *ReconcileRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ReconcileRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

// ReconcileResponse represents the response from a reconciliation request.
type ReconcileResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReconcileResponse) Reset()         { *m = ReconcileResponse{} }
func (m *ReconcileResponse) String() string { return proto.CompactTextString(m) }
func (*ReconcileResponse) ProtoMessage()    {}
func (*ReconcileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb40bcc605516477, []int{1}
}

func (m *ReconcileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReconcileResponse.Unmarshal(m, b)
}
func (m *ReconcileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReconcileResponse.Marshal(b, m, deterministic)
}
func (m *ReconcileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconcileResponse.Merge(m, src)
}
func (m *ReconcileResponse) XXX_Size() int {
	return xxx_messageInfo_ReconcileResponse.Size(m)
}
func (m *ReconcileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconcileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReconcileResponse proto.InternalMessageInfo

func (m *ReconcileResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReconcileResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ReconcileRequest)(nil), "protos.ReconcileRequest")
	proto.RegisterType((*ReconcileResponse)(nil), "protos.ReconcileResponse")
}

func init() { proto.RegisterFile("reconciler.proto", fileDescriptor_eb40bcc605516477) }

var fileDescriptor_eb40bcc605516477 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0xca, 0x82, 0x40,
	0x14, 0x85, 0xf1, 0xe7, 0xa7, 0xf2, 0xd6, 0xc2, 0x86, 0x16, 0x53, 0x10, 0x98, 0x2b, 0x57, 0x2e,
	0xea, 0x21, 0x22, 0x82, 0x16, 0x63, 0x7b, 0xd1, 0xf1, 0x52, 0x92, 0xce, 0xd8, 0x5c, 0xed, 0xf9,
	0xa3, 0x31, 0x41, 0xaa, 0xd5, 0x70, 0xce, 0x07, 0x87, 0x6f, 0x2e, 0x78, 0x06, 0xa5, 0x56, 0xb2,
	0x28, 0xd1, 0x44, 0xb5, 0xd1, 0x8d, 0x66, 0x23, 0xfb, 0x50, 0x70, 0x06, 0x4f, 0xf4, 0x4c, 0xe0,
	0xbd, 0x45, 0x6a, 0xd8, 0x1a, 0x40, 0x5e, 0x53, 0xa5, 0xb0, 0x4c, 0x8a, 0x9c, 0x3b, 0xbe, 0x13,
	0xba, 0xc2, 0x7d, 0x37, 0x87, 0x9c, 0x6d, 0x60, 0x96, 0x95, 0x5a, 0xde, 0x12, 0xd5, 0x56, 0x19,
	0x1a, 0xfe, 0xe7, 0x3b, 0xe1, 0xbf, 0x98, 0xda, 0xee, 0x64, 0xab, 0x60, 0x0f, 0xf3, 0xc1, 0x2a,
	0xd5, 0x5a, 0x11, 0x32, 0x0e, 0x63, 0x6a, 0xa5, 0x44, 0x22, 0xbb, 0x39, 0x11, 0x7d, 0x7c, 0x91,
	0x0a, 0x89, 0xd2, 0x0b, 0xda, 0x31, 0x57, 0xf4, 0x71, 0x9b, 0x0c, 0xf4, 0x62, 0x34, 0x8f, 0x42,
	0x22, 0x3b, 0xc2, 0x22, 0x46, 0x95, 0x7f, 0x69, 0xf3, 0xee, 0x6b, 0x14, 0x7d, 0x92, 0xd5, 0xf2,
	0x07, 0xe9, 0xa4, 0xb2, 0xee, 0x0e, 0xbb, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xe0, 0xc9,
	0x79, 0x22, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReconcileServiceClient is the client API for ReconcileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReconcileServiceClient interface {
	// RPC method to send a reconcile request
	SendReconcileRequest(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*ReconcileResponse, error)
}

type reconcileServiceClient struct {
	cc *grpc.ClientConn
}

func NewReconcileServiceClient(cc *grpc.ClientConn) ReconcileServiceClient {
	return &reconcileServiceClient{cc}
}

func (c *reconcileServiceClient) SendReconcileRequest(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*ReconcileResponse, error) {
	out := new(ReconcileResponse)
	err := c.cc.Invoke(ctx, "/protos.ReconcileService/SendReconcileRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconcileServiceServer is the server API for ReconcileService service.
type ReconcileServiceServer interface {
	// RPC method to send a reconcile request
	SendReconcileRequest(context.Context, *ReconcileRequest) (*ReconcileResponse, error)
}

// UnimplementedReconcileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReconcileServiceServer struct {
}

func (*UnimplementedReconcileServiceServer) SendReconcileRequest(ctx context.Context, req *ReconcileRequest) (*ReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReconcileRequest not implemented")
}

func RegisterReconcileServiceServer(s *grpc.Server, srv ReconcileServiceServer) {
	s.RegisterService(&_ReconcileService_serviceDesc, srv)
}

func _ReconcileService_SendReconcileRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconcileServiceServer).SendReconcileRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ReconcileService/SendReconcileRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconcileServiceServer).SendReconcileRequest(ctx, req.(*ReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReconcileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ReconcileService",
	HandlerType: (*ReconcileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReconcileRequest",
			Handler:    _ReconcileService_SendReconcileRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reconciler.proto",
}
