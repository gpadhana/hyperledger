// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	mock "github.com/stretchr/testify/mock"
)

// Ledger is an autogenerated mock type for the Ledger type
type Ledger struct {
	mock.Mock
}

type Ledger_Expecter struct {
	mock *mock.Mock
}

func (_m *Ledger) EXPECT() *Ledger_Expecter {
	return &Ledger_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with given fields: number
func (_m *Ledger) Block(number uint64) *common.Block {
	ret := _m.Called(number)

	var r0 *common.Block
	if rf, ok := ret.Get(0).(func(uint64) *common.Block); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Block)
		}
	}

	return r0
}

// Ledger_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type Ledger_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//   - number uint64
func (_e *Ledger_Expecter) Block(number interface{}) *Ledger_Block_Call {
	return &Ledger_Block_Call{Call: _e.mock.On("Block", number)}
}

func (_c *Ledger_Block_Call) Run(run func(number uint64)) *Ledger_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Ledger_Block_Call) Return(_a0 *common.Block) *Ledger_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Ledger_Block_Call) RunAndReturn(run func(uint64) *common.Block) *Ledger_Block_Call {
	_c.Call.Return(run)
	return _c
}

// Height provides a mock function with given fields:
func (_m *Ledger) Height() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Ledger_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type Ledger_Height_Call struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *Ledger_Expecter) Height() *Ledger_Height_Call {
	return &Ledger_Height_Call{Call: _e.mock.On("Height")}
}

func (_c *Ledger_Height_Call) Run(run func()) *Ledger_Height_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ledger_Height_Call) Return(_a0 uint64) *Ledger_Height_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Ledger_Height_Call) RunAndReturn(run func() uint64) *Ledger_Height_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBlock provides a mock function with given fields: block, encodedMetadataValue
func (_m *Ledger) WriteBlock(block *common.Block, encodedMetadataValue []byte) {
	_m.Called(block, encodedMetadataValue)
}

// Ledger_WriteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBlock'
type Ledger_WriteBlock_Call struct {
	*mock.Call
}

// WriteBlock is a helper method to define mock.On call
//   - block *common.Block
//   - encodedMetadataValue []byte
func (_e *Ledger_Expecter) WriteBlock(block interface{}, encodedMetadataValue interface{}) *Ledger_WriteBlock_Call {
	return &Ledger_WriteBlock_Call{Call: _e.mock.On("WriteBlock", block, encodedMetadataValue)}
}

func (_c *Ledger_WriteBlock_Call) Run(run func(block *common.Block, encodedMetadataValue []byte)) *Ledger_WriteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Block), args[1].([]byte))
	})
	return _c
}

func (_c *Ledger_WriteBlock_Call) Return() *Ledger_WriteBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *Ledger_WriteBlock_Call) RunAndReturn(run func(*common.Block, []byte)) *Ledger_WriteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// WriteConfigBlock provides a mock function with given fields: block, encodedMetadataValue
func (_m *Ledger) WriteConfigBlock(block *common.Block, encodedMetadataValue []byte) {
	_m.Called(block, encodedMetadataValue)
}

// Ledger_WriteConfigBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteConfigBlock'
type Ledger_WriteConfigBlock_Call struct {
	*mock.Call
}

// WriteConfigBlock is a helper method to define mock.On call
//   - block *common.Block
//   - encodedMetadataValue []byte
func (_e *Ledger_Expecter) WriteConfigBlock(block interface{}, encodedMetadataValue interface{}) *Ledger_WriteConfigBlock_Call {
	return &Ledger_WriteConfigBlock_Call{Call: _e.mock.On("WriteConfigBlock", block, encodedMetadataValue)}
}

func (_c *Ledger_WriteConfigBlock_Call) Run(run func(block *common.Block, encodedMetadataValue []byte)) *Ledger_WriteConfigBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Block), args[1].([]byte))
	})
	return _c
}

func (_c *Ledger_WriteConfigBlock_Call) Return() *Ledger_WriteConfigBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *Ledger_WriteConfigBlock_Call) RunAndReturn(run func(*common.Block, []byte)) *Ledger_WriteConfigBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewLedger creates a new instance of Ledger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLedger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ledger {
	mock := &Ledger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
