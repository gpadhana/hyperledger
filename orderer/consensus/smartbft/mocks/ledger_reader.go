// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	mock "github.com/stretchr/testify/mock"
)

// LedgerReader is an autogenerated mock type for the LedgerReader type
type LedgerReader struct {
	mock.Mock
}

type LedgerReader_Expecter struct {
	mock *mock.Mock
}

func (_m *LedgerReader) EXPECT() *LedgerReader_Expecter {
	return &LedgerReader_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with given fields: number
func (_m *LedgerReader) Block(number uint64) *common.Block {
	ret := _m.Called(number)

	var r0 *common.Block
	if rf, ok := ret.Get(0).(func(uint64) *common.Block); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Block)
		}
	}

	return r0
}

// LedgerReader_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type LedgerReader_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//   - number uint64
func (_e *LedgerReader_Expecter) Block(number interface{}) *LedgerReader_Block_Call {
	return &LedgerReader_Block_Call{Call: _e.mock.On("Block", number)}
}

func (_c *LedgerReader_Block_Call) Run(run func(number uint64)) *LedgerReader_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *LedgerReader_Block_Call) Return(_a0 *common.Block) *LedgerReader_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LedgerReader_Block_Call) RunAndReturn(run func(uint64) *common.Block) *LedgerReader_Block_Call {
	_c.Call.Return(run)
	return _c
}

// Height provides a mock function with given fields:
func (_m *LedgerReader) Height() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LedgerReader_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type LedgerReader_Height_Call struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *LedgerReader_Expecter) Height() *LedgerReader_Height_Call {
	return &LedgerReader_Height_Call{Call: _e.mock.On("Height")}
}

func (_c *LedgerReader_Height_Call) Run(run func()) *LedgerReader_Height_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LedgerReader_Height_Call) Return(_a0 uint64) *LedgerReader_Height_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LedgerReader_Height_Call) RunAndReturn(run func() uint64) *LedgerReader_Height_Call {
	_c.Call.Return(run)
	return _c
}

// NewLedgerReader creates a new instance of LedgerReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLedgerReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *LedgerReader {
	mock := &LedgerReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
