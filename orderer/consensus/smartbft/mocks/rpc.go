// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	orderer "github.com/hyperledger/fabric-protos-go/orderer"
	mock "github.com/stretchr/testify/mock"
)

// RPC is an autogenerated mock type for the RPC type
type RPC struct {
	mock.Mock
}

type RPC_Expecter struct {
	mock *mock.Mock
}

func (_m *RPC) EXPECT() *RPC_Expecter {
	return &RPC_Expecter{mock: &_m.Mock}
}

// SendConsensus provides a mock function with given fields: dest, msg
func (_m *RPC) SendConsensus(dest uint64, msg *orderer.ConsensusRequest) error {
	ret := _m.Called(dest, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *orderer.ConsensusRequest) error); ok {
		r0 = rf(dest, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RPC_SendConsensus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConsensus'
type RPC_SendConsensus_Call struct {
	*mock.Call
}

// SendConsensus is a helper method to define mock.On call
//   - dest uint64
//   - msg *orderer.ConsensusRequest
func (_e *RPC_Expecter) SendConsensus(dest interface{}, msg interface{}) *RPC_SendConsensus_Call {
	return &RPC_SendConsensus_Call{Call: _e.mock.On("SendConsensus", dest, msg)}
}

func (_c *RPC_SendConsensus_Call) Run(run func(dest uint64, msg *orderer.ConsensusRequest)) *RPC_SendConsensus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*orderer.ConsensusRequest))
	})
	return _c
}

func (_c *RPC_SendConsensus_Call) Return(_a0 error) *RPC_SendConsensus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RPC_SendConsensus_Call) RunAndReturn(run func(uint64, *orderer.ConsensusRequest) error) *RPC_SendConsensus_Call {
	_c.Call.Return(run)
	return _c
}

// SendSubmit provides a mock function with given fields: destination, request, report
func (_m *RPC) SendSubmit(destination uint64, request *orderer.SubmitRequest, report func(error)) error {
	ret := _m.Called(destination, request, report)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *orderer.SubmitRequest, func(error)) error); ok {
		r0 = rf(destination, request, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RPC_SendSubmit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSubmit'
type RPC_SendSubmit_Call struct {
	*mock.Call
}

// SendSubmit is a helper method to define mock.On call
//   - destination uint64
//   - request *orderer.SubmitRequest
//   - report func(error)
func (_e *RPC_Expecter) SendSubmit(destination interface{}, request interface{}, report interface{}) *RPC_SendSubmit_Call {
	return &RPC_SendSubmit_Call{Call: _e.mock.On("SendSubmit", destination, request, report)}
}

func (_c *RPC_SendSubmit_Call) Run(run func(destination uint64, request *orderer.SubmitRequest, report func(error))) *RPC_SendSubmit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*orderer.SubmitRequest), args[2].(func(error)))
	})
	return _c
}

func (_c *RPC_SendSubmit_Call) Return(_a0 error) *RPC_SendSubmit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RPC_SendSubmit_Call) RunAndReturn(run func(uint64, *orderer.SubmitRequest, func(error)) error) *RPC_SendSubmit_Call {
	_c.Call.Return(run)
	return _c
}

// NewRPC creates a new instance of RPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPC {
	mock := &RPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
