// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	bccsp "github.com/hyperledger/fabric/bccsp"

	mock "github.com/stretchr/testify/mock"

	smartbft "github.com/hyperledger/fabric/orderer/consensus/smartbft"
)

// RuntimeConfigManager is an autogenerated mock type for the RuntimeConfigManager type
type RuntimeConfigManager struct {
	mock.Mock
}

type RuntimeConfigManager_Expecter struct {
	mock *mock.Mock
}

func (_m *RuntimeConfigManager) EXPECT() *RuntimeConfigManager_Expecter {
	return &RuntimeConfigManager_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields:
func (_m *RuntimeConfigManager) GetConfig() smartbft.RuntimeConfig {
	ret := _m.Called()

	var r0 smartbft.RuntimeConfig
	if rf, ok := ret.Get(0).(func() smartbft.RuntimeConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(smartbft.RuntimeConfig)
	}

	return r0
}

// RuntimeConfigManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type RuntimeConfigManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *RuntimeConfigManager_Expecter) GetConfig() *RuntimeConfigManager_GetConfig_Call {
	return &RuntimeConfigManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *RuntimeConfigManager_GetConfig_Call) Run(run func()) *RuntimeConfigManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RuntimeConfigManager_GetConfig_Call) Return(_a0 smartbft.RuntimeConfig) *RuntimeConfigManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuntimeConfigManager_GetConfig_Call) RunAndReturn(run func() smartbft.RuntimeConfig) *RuntimeConfigManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsingBlock provides a mock function with given fields: block, _a1
func (_m *RuntimeConfigManager) UpdateUsingBlock(block *common.Block, _a1 bccsp.BCCSP) (smartbft.RuntimeConfig, error) {
	ret := _m.Called(block, _a1)

	var r0 smartbft.RuntimeConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Block, bccsp.BCCSP) (smartbft.RuntimeConfig, error)); ok {
		return rf(block, _a1)
	}
	if rf, ok := ret.Get(0).(func(*common.Block, bccsp.BCCSP) smartbft.RuntimeConfig); ok {
		r0 = rf(block, _a1)
	} else {
		r0 = ret.Get(0).(smartbft.RuntimeConfig)
	}

	if rf, ok := ret.Get(1).(func(*common.Block, bccsp.BCCSP) error); ok {
		r1 = rf(block, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuntimeConfigManager_UpdateUsingBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsingBlock'
type RuntimeConfigManager_UpdateUsingBlock_Call struct {
	*mock.Call
}

// UpdateUsingBlock is a helper method to define mock.On call
//   - block *common.Block
//   - _a1 bccsp.BCCSP
func (_e *RuntimeConfigManager_Expecter) UpdateUsingBlock(block interface{}, _a1 interface{}) *RuntimeConfigManager_UpdateUsingBlock_Call {
	return &RuntimeConfigManager_UpdateUsingBlock_Call{Call: _e.mock.On("UpdateUsingBlock", block, _a1)}
}

func (_c *RuntimeConfigManager_UpdateUsingBlock_Call) Run(run func(block *common.Block, _a1 bccsp.BCCSP)) *RuntimeConfigManager_UpdateUsingBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Block), args[1].(bccsp.BCCSP))
	})
	return _c
}

func (_c *RuntimeConfigManager_UpdateUsingBlock_Call) Return(_a0 smartbft.RuntimeConfig, _a1 error) *RuntimeConfigManager_UpdateUsingBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RuntimeConfigManager_UpdateUsingBlock_Call) RunAndReturn(run func(*common.Block, bccsp.BCCSP) (smartbft.RuntimeConfig, error)) *RuntimeConfigManager_UpdateUsingBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewRuntimeConfigManager creates a new instance of RuntimeConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntimeConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuntimeConfigManager {
	mock := &RuntimeConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
