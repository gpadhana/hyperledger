// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	mock "github.com/stretchr/testify/mock"

	msgprocessor "github.com/hyperledger/fabric/orderer/common/msgprocessor"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

type Processor_Expecter struct {
	mock *mock.Mock
}

func (_m *Processor) EXPECT() *Processor_Expecter {
	return &Processor_Expecter{mock: &_m.Mock}
}

// ClassifyMsg provides a mock function with given fields: chdr
func (_m *Processor) ClassifyMsg(chdr *common.ChannelHeader) msgprocessor.Classification {
	ret := _m.Called(chdr)

	var r0 msgprocessor.Classification
	if rf, ok := ret.Get(0).(func(*common.ChannelHeader) msgprocessor.Classification); ok {
		r0 = rf(chdr)
	} else {
		r0 = ret.Get(0).(msgprocessor.Classification)
	}

	return r0
}

// Processor_ClassifyMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClassifyMsg'
type Processor_ClassifyMsg_Call struct {
	*mock.Call
}

// ClassifyMsg is a helper method to define mock.On call
//   - chdr *common.ChannelHeader
func (_e *Processor_Expecter) ClassifyMsg(chdr interface{}) *Processor_ClassifyMsg_Call {
	return &Processor_ClassifyMsg_Call{Call: _e.mock.On("ClassifyMsg", chdr)}
}

func (_c *Processor_ClassifyMsg_Call) Run(run func(chdr *common.ChannelHeader)) *Processor_ClassifyMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.ChannelHeader))
	})
	return _c
}

func (_c *Processor_ClassifyMsg_Call) Return(_a0 msgprocessor.Classification) *Processor_ClassifyMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_ClassifyMsg_Call) RunAndReturn(run func(*common.ChannelHeader) msgprocessor.Classification) *Processor_ClassifyMsg_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessConfigMsg provides a mock function with given fields: env
func (_m *Processor) ProcessConfigMsg(env *common.Envelope) (*common.Envelope, uint64, error) {
	ret := _m.Called(env)

	var r0 *common.Envelope
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(*common.Envelope) (*common.Envelope, uint64, error)); ok {
		return rf(env)
	}
	if rf, ok := ret.Get(0).(func(*common.Envelope) *common.Envelope); ok {
		r0 = rf(env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Envelope)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Envelope) uint64); ok {
		r1 = rf(env)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(*common.Envelope) error); ok {
		r2 = rf(env)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Processor_ProcessConfigMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessConfigMsg'
type Processor_ProcessConfigMsg_Call struct {
	*mock.Call
}

// ProcessConfigMsg is a helper method to define mock.On call
//   - env *common.Envelope
func (_e *Processor_Expecter) ProcessConfigMsg(env interface{}) *Processor_ProcessConfigMsg_Call {
	return &Processor_ProcessConfigMsg_Call{Call: _e.mock.On("ProcessConfigMsg", env)}
}

func (_c *Processor_ProcessConfigMsg_Call) Run(run func(env *common.Envelope)) *Processor_ProcessConfigMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Envelope))
	})
	return _c
}

func (_c *Processor_ProcessConfigMsg_Call) Return(_a0 *common.Envelope, _a1 uint64, _a2 error) *Processor_ProcessConfigMsg_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Processor_ProcessConfigMsg_Call) RunAndReturn(run func(*common.Envelope) (*common.Envelope, uint64, error)) *Processor_ProcessConfigMsg_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessConfigUpdateMsg provides a mock function with given fields: env
func (_m *Processor) ProcessConfigUpdateMsg(env *common.Envelope) (*common.Envelope, uint64, error) {
	ret := _m.Called(env)

	var r0 *common.Envelope
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(*common.Envelope) (*common.Envelope, uint64, error)); ok {
		return rf(env)
	}
	if rf, ok := ret.Get(0).(func(*common.Envelope) *common.Envelope); ok {
		r0 = rf(env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Envelope)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Envelope) uint64); ok {
		r1 = rf(env)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(*common.Envelope) error); ok {
		r2 = rf(env)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Processor_ProcessConfigUpdateMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessConfigUpdateMsg'
type Processor_ProcessConfigUpdateMsg_Call struct {
	*mock.Call
}

// ProcessConfigUpdateMsg is a helper method to define mock.On call
//   - env *common.Envelope
func (_e *Processor_Expecter) ProcessConfigUpdateMsg(env interface{}) *Processor_ProcessConfigUpdateMsg_Call {
	return &Processor_ProcessConfigUpdateMsg_Call{Call: _e.mock.On("ProcessConfigUpdateMsg", env)}
}

func (_c *Processor_ProcessConfigUpdateMsg_Call) Run(run func(env *common.Envelope)) *Processor_ProcessConfigUpdateMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Envelope))
	})
	return _c
}

func (_c *Processor_ProcessConfigUpdateMsg_Call) Return(config *common.Envelope, configSeq uint64, err error) *Processor_ProcessConfigUpdateMsg_Call {
	_c.Call.Return(config, configSeq, err)
	return _c
}

func (_c *Processor_ProcessConfigUpdateMsg_Call) RunAndReturn(run func(*common.Envelope) (*common.Envelope, uint64, error)) *Processor_ProcessConfigUpdateMsg_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessNormalMsg provides a mock function with given fields: env
func (_m *Processor) ProcessNormalMsg(env *common.Envelope) (uint64, error) {
	ret := _m.Called(env)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Envelope) (uint64, error)); ok {
		return rf(env)
	}
	if rf, ok := ret.Get(0).(func(*common.Envelope) uint64); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*common.Envelope) error); ok {
		r1 = rf(env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processor_ProcessNormalMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessNormalMsg'
type Processor_ProcessNormalMsg_Call struct {
	*mock.Call
}

// ProcessNormalMsg is a helper method to define mock.On call
//   - env *common.Envelope
func (_e *Processor_Expecter) ProcessNormalMsg(env interface{}) *Processor_ProcessNormalMsg_Call {
	return &Processor_ProcessNormalMsg_Call{Call: _e.mock.On("ProcessNormalMsg", env)}
}

func (_c *Processor_ProcessNormalMsg_Call) Run(run func(env *common.Envelope)) *Processor_ProcessNormalMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.Envelope))
	})
	return _c
}

func (_c *Processor_ProcessNormalMsg_Call) Return(configSeq uint64, err error) *Processor_ProcessNormalMsg_Call {
	_c.Call.Return(configSeq, err)
	return _c
}

func (_c *Processor_ProcessNormalMsg_Call) RunAndReturn(run func(*common.Envelope) (uint64, error)) *Processor_ProcessNormalMsg_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
