// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type FollowerCreator struct {
	CreateFollowerStub        func()
	createFollowerMutex       sync.RWMutex
	createFollowerArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FollowerCreator) CreateFollower() {
	fake.createFollowerMutex.Lock()
	fake.createFollowerArgsForCall = append(fake.createFollowerArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateFollower", []interface{}{})
	fake.createFollowerMutex.Unlock()
	if fake.CreateFollowerStub != nil {
		fake.CreateFollowerStub()
	}
}

func (fake *FollowerCreator) CreateFollowerCallCount() int {
	fake.createFollowerMutex.RLock()
	defer fake.createFollowerMutex.RUnlock()
	return len(fake.createFollowerArgsForCall)
}

func (fake *FollowerCreator) CreateFollowerCalls(stub func()) {
	fake.createFollowerMutex.Lock()
	defer fake.createFollowerMutex.Unlock()
	fake.CreateFollowerStub = stub
}

func (fake *FollowerCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createFollowerMutex.RLock()
	defer fake.createFollowerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FollowerCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
