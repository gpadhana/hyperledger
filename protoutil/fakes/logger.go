// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type Logger struct {
	InfowStub        func(string, ...interface{})
	infowMutex       sync.RWMutex
	infowArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Logger) Infow(arg1 string, arg2 ...interface{}) {
	fake.infowMutex.Lock()
	fake.infowArgsForCall = append(fake.infowArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Infow", []interface{}{arg1, arg2})
	fake.infowMutex.Unlock()
	if fake.InfowStub != nil {
		fake.InfowStub(arg1, arg2...)
	}
}

func (fake *Logger) InfowCallCount() int {
	fake.infowMutex.RLock()
	defer fake.infowMutex.RUnlock()
	return len(fake.infowArgsForCall)
}

func (fake *Logger) InfowCalls(stub func(string, ...interface{})) {
	fake.infowMutex.Lock()
	defer fake.infowMutex.Unlock()
	fake.InfowStub = stub
}

func (fake *Logger) InfowArgsForCall(i int) (string, []interface{}) {
	fake.infowMutex.RLock()
	defer fake.infowMutex.RUnlock()
	argsForCall := fake.infowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Logger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.infowMutex.RLock()
	defer fake.infowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Logger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
